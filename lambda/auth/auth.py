import logging
from typing import Any, Dict
import auth.secretsmanager as sm
import auth.utils as utils

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)


def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    """
    AWS Lambda function that serves as an API Gateway authorizer.

    Args:
        event: The API Gateway event.
        context: The Lambda function context.

    Returns:
        The policy generated by the authorizer.

    """
    logger.info(f"API Authorizer Initiated: {event}")

    if "authorizationToken" not in event:
        logger.error("No AuthorizationToken provided in request.")
        return utils.generate_policy("user", "Deny", event)

    token_criteria = event["authorizationToken"].split("_")
    if not utils.validate_token_formatting(token_criteria):
        logger.error("Token Formatting validation failed.")
        return utils.generate_policy("user", "Deny", event)

    client = token_criteria[0]
    token = token_criteria[1]

    if not utils.validate_token(client, token):
        logger.error("Invalid Token Provided.")
        return utils.generate_policy(client, "Deny", event)

    return utils.generate_policy(client, "Allow", event)
