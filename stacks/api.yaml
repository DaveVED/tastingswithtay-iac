AWSTemplateFormatVersion: "2010-09-09"
Description: "API IaC for tastingswithtay"
Parameters:
  ENV:
    Type: String
    Default: "dev"
    AllowedValues:
      - "dev"
      - "prod"
    Description: "Environment (dev, prod)"
  Project:
    Type: String
    Default: "tastingswithtay"
    Description: "Project Name for resource naming."

Resources:
  AuthLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "${Project}-${ENV}-lambda-auth"
      Handler: "auth.auth.handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: "tastingswithtay-cf-iac-common-components"
        S3Key: "lambda/auth.zip"
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
  ContentLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "${Project}-${ENV}-content-wrapper"
      Handler: "content.content.handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: "tastingswithtay-cf-iac-common-components"
        S3Key: "lambda/content.zip"
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "LambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "S3Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:Get*"
                  - "s3:List*"
                  - "s3:PutObject"
                Resource: "arn:aws:s3:::tastingswithtay-cf-iac-common-components/*"
  ApiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub "${Project}-${ENV}-api"
  ContentResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "v1"
  ContentGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ContentResource
      HttpMethod: "GET"
      AuthorizationType: "CUSTOM"
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContentLambda.Arn}/invocations"
  ContentPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ContentResource
      HttpMethod: "POST"
      AuthorizationType: "CUSTOM"
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContentLambda.Arn}/invocations"
  ApiGatewayAuthorizer:
    Type: "AWS::ApiGateway::Authorizer"
    Properties:
      RestApiId: !Ref ApiGateway
      Name: "LambdaAuthorizer"
      Type: "TOKEN"
      IdentitySource: "method.request.header.Authorization"
      AuthorizerUri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthLambda.Arn}/invocations"
      AuthorizerResultTtlInSeconds: 300
