AWSTemplateFormatVersion: "2010-09-09"
Description: "API IaC for tastingswithtay"
Parameters:
  ENV:
    Type: String
    Default: "dev"
    AllowedValues:
      - "dev"
      - "prod"
    Description: "Environment (dev, prod)"
  Project:
    Type: String
    Default: "tastingswithtay"
    Description: "Project Name for resource naming."
  HostedZoneId:
    Type: String
    Default: "Z03417913PAYUETEFT28N"
    Description: "Hosted Zone ID, to map to ALB."
  AcmCertificateArn:
    Type: String
    Default: "arn:aws:acm:us-east-1:007794960432:certificate/0c4ef098-5199-4fce-b8cc-04f334c2ba1a"
    Description: "The ARN of the ACM certificate for the custom domain."
Resources:
  AuthLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "${Project}-${ENV}-lambda-auth"
      Handler: "auth.auth.handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: "tastingswithtay-cf-iac-common-components"
        S3Key: "lambda/auth.zip"
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
  ContentLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "${Project}-${ENV}-content-wrapper"
      Handler: "content.content.handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: "tastingswithtay-cf-iac-common-components"
        S3Key: "lambda/content.zip"
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "LambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "S3Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:Get*"
                  - "s3:List*"
                  - "s3:PutObject"
                Resource: "arn:aws:s3:::tastingswithtay-cf-iac-common-components/*"
  ApiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub "${Project}-${ENV}-api"
  ApiGatewayRootResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "v1"
      RestApiId: !Ref ApiGateway
  ApiGatewayContentResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayRootResource
      PathPart: "content"
      RestApiId: !Ref ApiGateway
  ApiGatewayMethodContentGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContentLambda.Arn}/invocations"
      OperationName: "lambda"
      ResourceId: !Ref ApiGatewayContentResource
      RestApiId: !Ref ApiGateway
  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "lambda:*"
                Resource: !GetAtt ContentLambda.Arn
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v1
      RestApiId: !Ref ApiGateway
      StageName: "v1"
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethodContentGet
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGateway
  ApiGatewayDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub "${ENV}-api.tastingswithtay.com"
      EndpointConfiguration:
        Types:
          - REGIONAL
      RegionalCertificateArn: !Ref AcmCertificateArn
  ApiGatewayAliasRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !Sub "${ENV}-api.tastingswithtay.com."
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt ApiGatewayDomainName.RegionalHostedZoneId
            DNSName: !GetAtt ApiGatewayDomainName.RegionalDomainName
            EvaluateTargetHealth: true
          SetIdentifier: ApiGatewayAliasRecord
          Region: us-east-1
