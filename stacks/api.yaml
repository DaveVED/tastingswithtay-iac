AWSTemplateFormatVersion: "2010-09-09"
Description: "API IaC for tastingswithtay"
Parameters:
  ENV:
    Type: String
    Default: "dev"
    AllowedValues:
      - "dev"
      - "prod"
    Description: "Environment (dev, prod)"
  Project:
    Type: String
    Default: "tastingswithtay"
    Description: "Project Name for resource naming."
  HostedZoneId:
    Type: String
    Default: "Z03417913PAYUETEFT28N"
    Description: "Hosted Zone ID, to map to ALB."
  AcmCertificateArn:
    Type: String
    Default: "arn:aws:acm:us-east-1:007794960432:certificate/0c4ef098-5199-4fce-b8cc-04f334c2ba1a"
    Description: "The ARN of the ACM certificate for the custom domain."
  APIVersion:
    Type: String
    Default: "v1"
    Description: "Current API Version."
Resources:
  AuthLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "${Project}-${ENV}-lambda-auth"
      Handler: "auth.auth.handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: "tastingswithtay-cf-iac-common-components"
        S3Key: "lambda/auth.zip"
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
  ContentLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "${Project}-${ENV}-content-wrapper"
      Handler: "content.content.handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: "tastingswithtay-cf-iac-common-components"
        S3Key: "lambda/content.zip"
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "LambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator"
        - "arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
      Policies:
        - PolicyName: "S3Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:Get*"
                  - "s3:List*"
                  - "s3:PutObject"
                Resource: "arn:aws:s3:::tastingswithtay-cf-iac-common-components/*"
        - PolicyName: "ApiGatewayInvoke"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "execute-api:Invoke"
                Resource: "*"
  ApiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub "${Project}-${ENV}-api"
  ApiGatewayContentResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "content"
      RestApiId: !Ref ApiGateway
  ApiGatewayMethodContentOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ResourceId: !Ref ApiGatewayContentResource
      RestApiId: !Ref ApiGateway
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  ApiGatewayMethodContentGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiGatewayAuthorizer
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContentLambda.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      OperationName: "lambda"
      ResourceId: !Ref ApiGatewayContentResource
      RestApiId: !Ref ApiGateway
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "lambda:*"
                Resource: !GetAtt ContentLambda.Arn
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v1
      RestApiId: !Ref ApiGateway
      StageName: "v1"
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethodContentGet
    Properties:
      Description:
        !Join [
          "",
          [
            "Lambda API Deployment - ",
            !Select [0, !Split ["-", !Ref "AWS::StackId"]],
          ],
        ]
      RestApiId: !Ref ApiGateway
  ApiGatewayDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub "${ENV}-api.tastingswithtay.com"
      EndpointConfiguration:
        Types:
          - REGIONAL
      RegionalCertificateArn: !Ref AcmCertificateArn
  ApiGatewayAliasRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub "${ENV}-api.tastingswithtay.com."
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt ApiGatewayDomainName.RegionalHostedZoneId
        DNSName: !GetAtt ApiGatewayDomainName.RegionalDomainName
        EvaluateTargetHealth: true
  APIBaseMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    Properties:
      BasePath: !Ref APIVersion
      DomainName: !Ref ApiGatewayDomainName
      RestApiId: !Ref ApiGateway
      Stage: !Ref ApiGatewayStage
  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerResultTtlInSeconds: 120
      AuthorizerUri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthLambda.Arn}/invocations"
      IdentitySource: method.request.header.Authorization
      Name: !Sub "${Project}-${ENV}-authorizer"
      RestApiId: !Ref ApiGateway
      Type: TOKEN
  GWAuthPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AuthLambda.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/authorizers/${ApiGatewayAuthorizer}"
