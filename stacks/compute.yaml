# Creats the core common compute components for https://tastingswithtays.com
#
# Using this compute.yaml temaplte, you will get a compute configuration with the following setup.
#    1. ECS Cluster, with encryption, logging, and container insights.
#    2. ECS Task definition working with the ECR for your UI.
#
# For the three tier applicaiotn, this is enough infrastruce to support, no need to use EKS.
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  ENV:
    Type: String
    Default: "dev"
    AllowedValues:
      - "dev"
      - "prod"
    Description: "Environment (dev, prod)"
  Project:
    Type: String
    Default: "myproject"
    Description: "Project name"
Resources:
  KmsKey:
    Type: "AWS::KMS::Key"
    Properties:
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"

  KmsKeyAlias:
    Type: "AWS::KMS::Alias"
    Properties:
      AliasName: "alias/ecsKey"
      TargetKeyId: !Ref KmsKey
  CloudwatchLogsGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "${Project}-${ENV}-ECSLogGroup"
      RetentionInDays: 14
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Sub "${Project}-${ENV}-cluster"
      Configuration:
        ExecuteCommandConfiguration:
          KmsKeyId: !Ref KmsKeyAlias
          Logging: OVERRIDE
          LogConfiguration:
            CloudWatchEncryptionEnabled: true
            CloudWatchLogGroupName: !Ref CloudwatchLogsGroup
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${ENV}-cluster"
  EcsSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !ImportValue VPC
  EcsSecurityGroupALBports:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 31000
      ToPort: 61000
      SourceSecurityGroupId: !Ref AlbSecurityGroup
  AlbSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !ImportValue VPC
  AlbSecurityGroupHTTPinbound:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref AlbSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 70.123.176.84/32
