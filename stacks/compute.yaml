######################################################################################################
# Creats the core common compute components for https://tastingswithtays.com
#
# Using this compute.yaml temaplte, you will get a compute configuration with the following setup.
#    1. ECS Cluster, with encryption, logging, and container insights.
#    2. ECS Task definition working with the ECR for your UI.
#    3. ECS Service to Mange the required number of provisioned tasks.
#    4. ALB to front as an entry point.
#    5. Route53 + SSL support.
#
# For the three tier applicaiotn, this is enough infrastruce to support, no need to use EKS.
######################################################################################################
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  ENV:
    Type: String
    Default: "dev"
    AllowedValues:
      - "dev"
      - "prod"
    Description: "Environment (dev, prod)"
  Project:
    Type: String
    Default: "myproject"
    Description: "Project name"
  TaskCount:
    Type: Number
    Default: 2
    Description: "Number of ECS tasks to provision"
  ECRRepoUri:
    Type: String
    Default: "007794960432.dkr.ecr.us-east-1.amazonaws.com/myproject-dev-ui-ecr:latest"
    Description: "ECR Repo UI for docker."
Resources:
  CloudwatchLogsGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "${Project}-${ENV}-ECSLogGroup"
      RetentionInDays: 14
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Sub "${Project}-${ENV}-cluster"
      Configuration:
        ExecuteCommandConfiguration:
          Logging: OVERRIDE
          LogConfiguration:
            CloudWatchEncryptionEnabled: true
            CloudWatchLogGroupName: !Ref CloudwatchLogsGroup
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${ENV}-cluster"
  EcsSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !ImportValue VPC
  EcsSecurityGroupALBports:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 31000
      ToPort: 61000
      SourceSecurityGroupId: !Ref AlbSecurityGroup
  EcsSecurityGroupSelf:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref EcsSecurityGroup
  AlbSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !ImportValue VPC
  AlbSecurityGroupHTTPinbound:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref AlbSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 70.123.176.84/32
  AlbSecurityGroupSelf:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref AlbSecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref AlbSecurityGroup
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Project}-${ENV}-ecs-task-execution"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${Project}-${ENV}-ui"
      Cpu: "512"
      NetworkMode: "awsvpc"
      Memory: "2048"
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      RequiresCompatibilities:
        - "FARGATE"
      ContainerDefinitions:
        - Name: !Sub "${Project}-${ENV}-ui"
          Image: !Ref ECRRepoUri
          Cpu: "512"
          Memory: "2048"
          Essential: true
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: !Sub "${Project}-${ENV}-ui"
          HealthCheck:
            Retries: 5
            Interval: 120
            Timeout: 60
            StartPeriod: 300
            Command: ["CMD-SHELL", "echo hello"]
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Sub "${Project}-${ENV}-ui-service"
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: "FARGATE"
      DesiredCount: !Ref TaskCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Split [",", !ImportValue PrivateSubnets]
          SecurityGroups: [!Ref EcsSecurityGroup]
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: !Sub "${Project}-${ENV}-ui"
          ContainerPort: 3000
          TargetGroupArn: !Ref EcsTargetGroup
  EcsLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${Project}-${ENV}-ui-alb"
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4
      Subnets: !Split [",", !ImportValue PublicSubnets]
      SecurityGroups: [!Ref AlbSecurityGroup]
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${ENV}-ui-alb"
